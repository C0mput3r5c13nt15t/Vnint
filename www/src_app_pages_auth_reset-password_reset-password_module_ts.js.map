{"version":3,"file":"src_app_pages_auth_reset-password_reset-password_module_ts.js","mappings":"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","sources":["./src/app/pages/auth/reset-password/reset-password.page.html","./src/app/pages/auth/reset-password/reset-password-routing.module.ts","./src/app/pages/auth/reset-password/reset-password.module.ts","./src/app/pages/auth/reset-password/reset-password.page.ts"],"sourcesContent":["export default \"<ion-content>\\n  <app-toolbar></app-toolbar>\\n  <ion-grid class=\\\"reset-password-grid\\\">\\n    <ion-row>\\n      <ion-col>\\n        <app-card-title-bar title=\\\"{{ 'RESET_PASSWORD.title' | translate }}\\\"></app-card-title-bar>\\n        <ion-card color=\\\"light\\\">\\n          <ion-card-content>\\n            <ion-grid class=\\\"inside-card-grid\\\">\\n              <ion-row>\\n                <ion-col>\\n                  <form [formGroup]=\\\"resetPasswordForm\\\" (ngSubmit)=\\\"resetPassword()\\\" novalidate>\\n                    <ion-item color=\\\"light\\\">\\n                      <ion-input type=\\\"email\\\" name=\\\"email\\\" formControlName=\\\"email\\\" placeholder=\\\"{{ 'LOGIN.INPUT.email' | translate }}\\\"></ion-input>\\n                    </ion-item>\\n                    <app-form-error [errors]=\\\"errorControl.email.errors\\\"></app-form-error>\\n\\n                    <ion-item color=\\\"light\\\" lines=\\\"full\\\">\\n                      <ion-input formControlName=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"{{ 'REGISTER.INPUT.password' | translate }}\\\"></ion-input>\\n                    </ion-item>\\n                    <app-form-error [errors]=\\\"errorControl.password.errors\\\"></app-form-error>\\n\\n                    <ion-item color=\\\"light\\\" lines=\\\"full\\\">\\n                      <ion-input (keypress)=\\\"keyPressEventHandler($event.key)\\\" formControlName=\\\"password_confirmation\\\" type=\\\"password\\\" placeholder=\\\"{{ 'REGISTER.INPUT.passwordConfirmation' | translate }}\\\"></ion-input>\\n                    </ion-item>\\n                    <app-form-error [errors]=\\\"errorControl.password_confirmation.errors\\\"></app-form-error>\\n\\n                    <ion-checkbox class=\\\"invisible\\\" formControlName=\\\"fax\\\"></ion-checkbox>\\n\\n                    <div class=\\\"ion-padding\\\">\\n                      <ion-button *ngIf=\\\"!isProcessed\\\" [disabled]=\\\"resetPasswordForm.invalid || isProcessed\\\" type=\\\"submit\\\" class=\\\"ion-no-margin\\\" expand=\\\"block\\\" color=\\\"primary\\\">{{ 'RESET_PASSWORD.INPUT.resetButton' | translate }}</ion-button>\\n                      <ion-button *ngIf=\\\"isProcessed\\\" [disabled]=\\\"resetPasswordForm.invalid || isProcessed\\\" type=\\\"submit\\\" class=\\\"ion-no-margin\\\" expand=\\\"block\\\" color=\\\"primary\\\"><ion-spinner name=\\\"crescent\\\"></ion-spinner></ion-button>\\n                    </div>\\n                  </form>\\n                </ion-col>\\n              </ion-row>\\n            </ion-grid>\\n          </ion-card-content>\\n        </ion-card>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n  <app-footer class=\\\"fixed-footer\\\"></app-footer>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ResetPasswordPage } from './reset-password.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ResetPasswordPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\n\nimport { ResetPasswordPageRoutingModule } from './reset-password-routing.module';\nimport { ComponentsModule } from '../../../components/components.module';\n\nimport { ResetPasswordPage } from './reset-password.page';\n\nimport {createTranslateLoader} from \"src/app/app.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ResetPasswordPageRoutingModule,\n    ComponentsModule,\n    ReactiveFormsModule,\n    TranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient]\n      }\n    })\n  ],\n  declarations: [ResetPasswordPage]\n})\nexport class ResetPasswordPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ErrorService } from 'src/app/services/error.service';\nimport {TranslateService} from \"@ngx-translate/core\";\nimport {AlertService} from \"../../../services/alert.service\";\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.page.html',\n  styleUrls: ['./reset-password.page.scss'],\n})\nexport class ResetPasswordPage implements OnInit {\n  resetPasswordForm: FormGroup;\n  isProcessed = false;\n\n  constructor(public formBuilder: FormBuilder,\n              private activatedRoute: ActivatedRoute,\n              private auth: AuthService,\n              private router: Router,\n              private errorService: ErrorService,\n              private translate: TranslateService,\n              private alertService: AlertService) { }\n\n  ngOnInit() {\n    this.resetPasswordForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n      password_confirmation: ['', Validators.required],\n      token: ['', Validators.required],\n      fax: ['']\n    });\n  }\n\n  ionViewWillEnter() {\n    this.isProcessed = false;\n    this.auth.authenticated().subscribe({\n      error: error => {\n        this.errorService.errorOccurred.emit(error);\n      },\n      next: response => {\n        const resp: any = response;\n        if (resp.authenticated == true) {\n          this.auth.setLoggedIn = true;\n          this.router.navigate(['/dashboard']);\n        }\n      },\n    });\n\n    this.activatedRoute.paramMap.subscribe(paramMap => {\n      if (paramMap.has('ResetToken')) {\n        this.resetPasswordForm.patchValue({\n          token: this.activatedRoute.snapshot.paramMap.get('ResetToken')\n        });\n      } else {\n        this.router.navigate(['/login']);\n      }\n    });\n  }\n\n  get errorControl() {\n    return this.resetPasswordForm.controls;\n  }\n\n  keyPressEventHandler(key) {\n    if (key == \"Enter\" && !this.isProcessed) {\n      this.resetPassword();\n    }\n  }\n\n  resetPassword() {\n    if (!this.isProcessed && !this.resetPasswordForm.value.fax && this.resetPasswordForm.valid) {\n      this.isProcessed = true;\n      if (!this.resetPasswordForm.valid) {\n        return false;\n      } else {\n        this.auth.resetPassword(this.resetPasswordForm.value).subscribe({\n          error: error => {\n            if (error.error.message == 'The given data was invalid.') {\n              for (const errorType in error.error.errors) {\n                let errors: any = [];\n                for (const errorMessage in error.error.errors[errorType]) {\n                  errors.push({[error.error.errors[errorType][errorMessage]]: true})\n                }\n                this.resetPasswordForm.controls[errorType].setErrors(errors)\n              }\n            } else if (error.error.message == 'missingPermissions') {\n              this.alertService.alert(\"danger\", this.translate.instant('GENERAL.ERRORS.missingPermissions'), '', 'lock-closed');\n            } else {\n              this.errorService.errorOccurred.emit(error);\n            }\n            this.isProcessed = false;\n          },\n          next: response => {\n            let resp: any = response;\n            this.alertService.alert(\"success\", this.translate.instant('RESET_PASSWORD.title'), resp.message, \"checkmark\");\n          },\n          complete: () => {\n            this.resetPasswordForm.reset();\n            this.auth.setLoggedIn = false;\n            this.auth.setSessionExpired = false;\n            this.isProcessed = false;\n            this.router.navigate(['/login']);\n          },\n        });\n      }\n    }\n  }\n\n}\n"],"names":[],"sourceRoot":"webpack:///"}